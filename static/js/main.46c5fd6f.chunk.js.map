{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","readout","operation","numberOne","numberTwo","clear","setState","setOperatorAfterEquals","input","buildOperation","equals","then","num1","num2","result","Number","this","Promise","accept","toString","className","onClick","buildSum","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46c5fd6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Calculator extends Component {\n\n    state = {\n        readout: \"\",\n        operation: \"\",\n        numberOne: \"\",\n        numberTwo: \"\"\n    }\n\n    clear = () => {\n        this.setState(\n            {\n                readout: \"\",\n                operation: \"\",\n                numberOne: \"\",\n                numberTwo: \"\"\n            }\n        )\n    }\n\n    //this is called whenever we enter a number. It populates readout and either numberOne or numberTwo\n    async buildSum(input) {\n        if (this.state.operation !== \"\" && this.state.numberTwo === \"\") {   //this is for the case when we start inputting a second number\n            // console.log(\"number outcome 1\");\n            // console.log(\"number 1 is \"+this.state.numberOne);\n            await new Promise(accept => this.setState(\n                {\n                    readout: input,\n                }, accept))\n\n            this.setState(\n                {\n                    numberTwo: this.state.readout\n                })\n\n        } else if (this.state.operation !== \"\" && this.state.numberOne === \"\") { //this is when we input the first number and we've just done a sum (so operator and second number have values)\n            // console.log(\"number outcome 2\");\n            this.clear();\n            await new Promise(accept => this.setState(\n                {\n                    readout: input,\n                }, accept));\n            this.setState(\n                {\n                    numberOne: this.state.readout\n                })\n\n        } else if (this.state.operation !== \"\") { //this is when we continue to input the second number\n            // console.log(\"number outcome 3\");\n            await new Promise(accept => this.setState(\n                {\n                    readout: this.state.readout.toString() + input,\n                }, accept));\n            this.setState({\n                numberTwo: this.state.readout\n            })\n\n        } else if (this.state.operation === \"\") {  //this is for when we are inputting the first number\n            // console.log(\"number outcome 4\");\n            await new Promise(accept => this.setState(\n                {\n                    readout: this.state.readout.toString() + input\n                }, accept));\n            this.setState({\n                numberOne: this.state.readout\n            })\n        }\n    }\n\n    setOperatorAfterEquals = (input) => {\n\n        this.setState({\n            numberOne: this.state.readout,     //giving numberOne a value again since the equals cleared it\n            numberTwo: \"\",                  //clearing numberTwo so that a new one can be set\n            operation: input                 //setting the new operation\n        })\n    }\n\n    //this sets the operation\n    buildOperation = (input) => {\n        // if an operator is selected when num1, num2 and operator are populated, equals should be run first \n        if (this.state.numberOne !== \"\" && this.state.operation !== \"\" && this.state.readout !== \"\") {\n            // console.log(\"operation outcome 1\");\n            this.equals().then(this.setOperatorAfterEquals(input));\n\n            // if an operator is selected after equals (num2 and operator are populated), num1 should be populated from input\n        } else if (this.state.numberOne === \"\" && this.state.operation !== \"\" && this.state.readout !== \"\") {\n            // console.log(\"operation outcome 2\");\n            this.setOperatorAfterEquals(input);\n\n            // the else case covers inputs when numberOne is populated and numberTwo is empty\n        } else {\n            // console.log(\"operation outcome 3\");\n            this.setState(\n                {\n                    operation: input\n                    // numberOne: this.state.readout\n                }\n            )\n        }\n    }\n\n    //we need a function to handle each operator, so that it can be easilly called within the equals() promise\n\n    operation = (num1, num2) => {\n        let result;\n        num1 = Number(num1);\n        num2 = Number(num2);\n        // console.log(this.state.operation);\n        switch (this.state.operation) {\n            case \"+\":\n                result = num1 + num2;\n                break;\n            case \"-\":\n                result = num1 - num2;\n                break;\n            case \"/\":\n                result = num1 / num2;\n                break;\n            default:\n                result = \"something has gone wrong\";\n        }\n        // console.log(result);\n        return result;\n    }\n\n    equals = () => {\n        // for the case where equals is run for the first time\n        if (this.state.numberOne !== \"\" && this.state.operation !== \"\" && this.state.readout !== \"\") { //this is suspect, why am I not looking at numberTwo?\n            // console.log(\"equals outcome 1\");\n            // console.log(`Going into the equals, number1 is ${this.state.numberOne} with a type of ${typeof this.state.numberOne}`);\n            // console.log(`Going into the equals, number2 is ${this.state.numberTwo} with a type of ${typeof this.state.numberTwo}`);\n            // console.log(`Going into the equals, readout is ${this.state.readout} and operator is ${this.state.operation}`);\n            let result = this.operation(this.state.numberOne, this.state.numberTwo);\n            // console.log(`The result is ${result}`);\n            this.setState({\n                readout: result,\n                numberOne: \"\"\n            })\n            //this is if equals is pressed more than once\n        } else if (this.state.numberOne === \"\" && this.state.operation !== \"\" && this.state.readout !== \"\") {\n            // console.log(\"equals outcome 2\");\n            // console.log(`Going into the equals, number1 is ${this.state.numberOne}`);\n            // console.log(`Going into the equals, number2 is ${this.state.numberTwo}`);\n            let result = this.operation(this.state.readout, this.state.numberTwo);\n            this.setState({\n                readout: result\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <div className=\"display\">{this.state.readout}</div>\n                <div className=\"button clear\" onClick={this.clear}>clear</div>\n                <div className=\"button  operator divide\" onClick={() => this.buildOperation(\"/\")}>/</div>\n                <div className=\"button number seven\" onClick={() => this.buildSum(7)}>7</div>\n                <div className=\"button number eight\" onClick={() => this.buildSum(8)}>8</div>\n                <div className=\"button number nine\" onClick={() => this.buildSum(9)}>9</div>\n                <div className=\"button operator minus\" onClick={() => this.buildOperation(\"-\")}>-</div>\n                <div className=\"button number four\" onClick={() => this.buildSum(4)}>4</div>\n                <div className=\"button number five\" onClick={() => this.buildSum(5)}>5</div>\n                <div className=\"button number six\" onClick={() => this.buildSum(6)}>6</div>\n                <div className=\"button operator plus\" onClick={() => this.buildOperation(\"+\")}>+</div>\n                <div className=\"button number one\" onClick={() => this.buildSum(1)}>1</div>\n                <div className=\"button number two\" onClick={() => this.buildSum(2)}>2</div>\n                <div className=\"button number three\" onClick={() => this.buildSum(3)}>3</div>\n                <div className=\"button operator equals\" onClick={this.equals}>=</div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}